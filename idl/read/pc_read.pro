; +
; NAME:
;       PC_READ
;
; PURPOSE:
;       Pencil-Code unified reading routine.
;       Reads data from a snapshot file generated by a Pencil Code run.
;       This routine automatically detects HDF5 and old binary formats.
;
; CALLING:
;       pc_read, quantity, filename=filename, datadir=datadir, trimall=trim, processor=processor, dim=dim, start=start, count=count
;
; PARAMETERS:
;       quantity [string]: f-array component to read (mandatory).
;       filename [string]: name of the file to read. Default: last opened file
;       datadir [string]: path to the data directory. Default: 'data/'
;       trimall [boolean]: do not read ghost zones. Default: false
;       processor [integer]: number of processor subdomain to read. Default: all
;       dim [structure]: dimension structure. Default: load if needed
;       start [integer]: start reading at this grid position (includes ghost cells)
;       count [integer]: number of grid cells to read from starting position
;
; EXAMPLES:
;       Ax = pc_read ('ax', file='var.h5') ;; read Ax
;       Ay = pc_read ('ay', /trim) ;; read Ay without ghost cells
;       Az = pc_read ('az', processor=2) ;; read subvolume of processor 2
;       ux = pc_read ('ux', start=[35,35,3], count=[32,32,4]) ;; read subvolume
;
; MODIFICATION HISTORY:
;       $Id$
;       07-Apr-2019/PABourdin: coded
;
function pc_read, quantity, filename=filename, datadir=datadir, trimall=trim, processor=processor, dim=dim, start=start, count=count

	COMPILE_OPT IDL2,HIDDEN

	common pc_read_common, file

	particles = (strpos (strlowcase (quantity) ,'part/') ge 0)

	if (keyword_set (filename)) then begin
		if (not keyword_set (datadir)) then datadir = pc_get_datadir (datadir)
		file = datadir+'/allprocs/'+filename
	end else begin
		if (not keyword_set (file)) then begin
			; no file is open
			if (not keyword_set (datadir)) then datadir = pc_get_datadir (datadir)
			if (file_test (datadir+'/allprocs/var.h5')) then begin
				filename = 'var.h5'
				file = datadir+'/allprocs/'+filename
			end else begin
				; no HDF5 file found
				if (not file_test (datadir+'/proc0/var.dat') and not file_test (datadir+'/allprocs/var.dat')) then begin
					message, 'pc_read: ERROR: please either give a filename or open a HDF5 file!'
				end
				; read old file format
				return, pc_read_old (quantity, filename=filename, datadir=datadir, trimall=trim, processor=processor, dim=dim, start=start, count=count)
			end
		end
	end

	if (size (processor, /type) ne 0) then begin
		if (keyword_set (particles)) then begin
			distribution = hdf5_read ('proc/distribution', filename=file)
			start = 0
			if (processor ge 1) then start = total (distribution[0:processor-1])
			count = distribution[processor]
			return, hdf5_read (quantity, start=start, count=count)
		end else begin
			if (size (dim, /type) eq 0) then pc_read_dim, obj=dim, datadir=datadir, proc=proc
			ipx = processor mod dim.nprocx
			ipy = (processor / dim.nprocx) mod dim.nprocy
			ipz = processor / (dim.nprocx * dim.nprocy)
                        nx = dim.nxgrid / dim.nprocx
                        ny = dim.nygrid / dim.nprocy
                        nz = dim.nzgrid / dim.nprocz
                        ghost = [ dim.nghostx, dim.nghosty, dim.nghostz ]
			start = [ ipx*nx, ipy*ny, ipz*nz ]
			count = [ nx, ny, nz ] + ghost * 2
		end
	end

	if (not keyword_set (particles)) then begin
		if (strpos (strlowcase (quantity) ,'/') lt 0) then quantity = 'data/'+quantity
		if (keyword_set (trim)) then begin
			default, start, [ 0, 0, 0 ]
			default, count, [ dim.mxgrid, dim.mygrid, dim.mzgrid ]
			if (size (dim, /type) eq 0) then pc_read_dim, obj=dim, datadir=datadir
                        ghost = [ dim.nghostx, dim.nghosty, dim.nghostz ]
			degenerated = where (count eq 1, num_degenerated)
			if (num_degenerated gt 0) then ghost[degenerated] = 0
			return, hdf5_read (quantity, filename=file, start=start+ghost, count=count-ghost*2)
		end
	end

	return, hdf5_read (quantity, filename=file, start=start, count=count)
end

